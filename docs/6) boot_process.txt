üîóThe Boot Process
When you turn on a computer, it begins executing firmware code that is stored in motherboard ROM. This code performs a power-on self-test, detects available RAM, and pre-initializes the CPU and hardware. Afterwards, it looks for a bootable disk and starts booting the operating system kernel.

On x86, there are two firmware standards: the ‚ÄúBasic Input/Output System‚Äú (BIOS) and the newer ‚ÄúUnified Extensible Firmware Interface‚Äù (UEFI). The BIOS standard is old and outdated, but simple and well-supported on any x86 machine since the 1980s. UEFI, in contrast, is more modern and has much more features, but is more complex to set up (at least in my opinion).

Almost all x86 systems have support for BIOS booting, including newer UEFI-based machines that use an emulated BIOS. This is great, because you can use the same boot logic across all machines from the last century. But this wide compatibility is at the same time the biggest disadvantage of BIOS booting, because it means that the CPU is put into a 16-bit compatibility mode called real mode before booting so that archaic bootloaders from the 1980s would still work.

But let‚Äôs start from the beginning:

When you turn on a computer, it loads the BIOS from some special flash memory located on the motherboard. The BIOS runs self-test and initialization routines of the hardware, then it looks for bootable disks. If it finds one, control is transferred to its bootloader, which is a 512-byte portion of executable code stored at the disk‚Äôs beginning. Most bootloaders are larger than 512 bytes, so bootloaders are commonly split into a small first stage, which fits into 512 bytes, and a second stage, which is subsequently loaded by the first stage.

The bootloader has to determine the location of the kernel image on the disk and load it into memory. It also needs to switch the CPU from the 16-bit real mode first to the 32-bit protected mode, and then to the 64-bit long mode, where 64-bit registers and the complete main memory are available. Its third job is to query certain information (such as a memory map) from the BIOS and pass it to the OS kernel.

Writing a bootloader is a bit cumbersome as it requires assembly language and a lot of non insightful steps like ‚Äúwrite this magic value to this processor register‚Äù. Therefore, we don‚Äôt cover bootloader creation in this post and instead provide a tool named bootimage that automatically prepends a bootloader to your kernel.

The Multiboot Standard
The Multiboot standard was introduced by the Free Software Foundation (FSF) in 1995 to address a common problem in operating systems (OS): each OS often required its own specific bootloader. This made it difficult for a bootloader to work with multiple operating systems. The Multiboot standard defines a universal interface between a bootloader and the OS kernel, making it possible for any bootloader following the standard to load any Multiboot-compliant OS.

Key Features of the Multiboot Standard
Interoperability:
Multiboot-compliant bootloaders can load any OS that follows the standard.
This eliminates the need for each OS to have its own bootloader and allows systems to be more versatile.
GNU GRUB (Grand Unified Bootloader):
GRUB is the most popular bootloader that implements the Multiboot standard.
It‚Äôs widely used in Linux systems but also works with other OS kernels that are Multiboot-compliant.

Making a Kernel Multiboot Compliant
To make an OS kernel work with the Multiboot standard, the kernel file needs to include a Multiboot header. This header contains important information such as:

The entry point of the kernel.
Any required memory information for the bootloader.
This header is typically placed at the start of the kernel file. Once included, the Multiboot-compliant bootloader (like GRUB) can recognize and load the kernel.

Drawbacks and Limitations of GRUB and the Multiboot Standard
Despite its widespread use, the Multiboot standard and GRUB come with some limitations:

32-bit Mode Only:

The standard supports only the 32-bit protected mode, which was common in early x86 processors.
If a kernel wants to run in 64-bit long mode (as modern systems do), the kernel developer still has to handle the process of switching from 32-bit to 64-bit mode after the OS starts booting. This complicates the design of 64-bit kernels.
Bootloader Simplicity over Kernel Simplicity:

GRUB is designed to be simple and flexible, but this comes at the cost of increased complexity for the kernel.
For instance, GRUB expects the Multiboot header to be located in specific positions in memory. If the kernel doesn‚Äôt meet these expectations, it won‚Äôt be loaded.
Developers must also link the kernel with an adjusted default page size (i.e., memory pages) for compatibility with GRUB. This adds extra work for kernel developers.
Architecture-Dependent Structures:

When GRUB loads the kernel, it passes certain boot information to the kernel. However, much of this data is highly dependent on the hardware architecture.
There‚Äôs a lack of clean, abstracted structures for the kernel to interact with, meaning the OS developer must deal with architecture-specific details, complicating kernel portability.
Sparse Documentation:

Both GRUB and the Multiboot standard suffer from a lack of comprehensive documentation.
While they are widely used, developers may find it challenging to find detailed guides or explanations, leading to longer development times.
Difficult to Develop on Non-Linux Platforms:

GRUB needs to be installed on the host system to create a bootable disk image from the kernel file.
This means that, while development on Linux is straightforward, it‚Äôs harder to use GRUB on systems like Windows or Mac, where GRUB is not natively available. Developers on these platforms often face additional challenges when testing or deploying their OS kernels.
Alternatives and Future Plans
Due to the drawbacks of the Multiboot standard and GRUB, some developers choose not to use them. However, to maintain compatibility with existing systems that rely on GRUB, some projects aim to add optional Multiboot support to their tools.

For example, the blog mentions a tool called bootimage, which could potentially gain Multiboot support. This would allow kernels to run on GRUB systems while offering more flexibility and modern alternatives for kernel developers.

The Multiboot standard primarily targets BIOS-based systems. However, its principles can also be adapted for use with UEFI (Unified Extensible Firmware Interface) systems